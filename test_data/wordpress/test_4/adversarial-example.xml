<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>A geek with a hat</title>
	<link>https://swizec.com/blog</link>
	<description>Helping you become a better engineer</description>
	<pubDate>Thu, 13 Aug 2020 01:42:08 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://swizec.com/blog</wp:base_site_url>
	<wp:base_blog_url>https://swizec.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[swizec@swizec.com]]></wp:author_email><wp:author_display_name><![CDATA[Swizec]]></wp:author_display_name><wp:author_first_name><![CDATA[Swizec]]></wp:author_first_name><wp:author_last_name><![CDATA[Teller]]></wp:author_last_name></wp:author>


	
	<item>
		<title>Use ref callbacks to measure React component size</title>
		<link>https://swizec.com/blog/ref-callbacks-measure-react-component-size/swizec/8444</link>
		<pubDate>Thu, 07 Jun 2018 17:04:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://swizec.com/blog/?p=8444</guid>
		<description></description>
		<content:encoded><![CDATA[You can use ref callbacks to measure the rendered size of React components, did you know? It's a neat little trick.

<iframe src="https://codesandbox.io/embed/71vx2q5r76" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin" class="hai-there"></iframe>



Here's how it works ðŸ‘‡
1. React renders your component
2. Browser layout engine does its thing
3. ref callback fires
4. Use <code>getBoundingClientRect</code> to measure element size
5. Use this info for whatever you want

We used this trick in this <a href="https://swizec.com/blog/build-animated-accordion-react-d3/swizec/8418">Dynamic SVG accordion example</a> and in this <a href="https://swizec.com/blog/tiny-react-d3-flamegraph-tutorial/swizec/8440">Tiny React &amp; D3 flamegraph tutorial</a>. That's because layouting in SVG is hard, and you have to do everything yourself.

Using ref callbacks to measure your elements is a little less useful in the modern HTML + CSS world. You can use flexbox and css-grid so you never need to know what you're dealing with.

And yet when push comes to shove, sometimes you just really need your code to know the size of an element.

A minimal size reporting component looks like this ðŸ‘‡

<pre lang="javascript">
class ReportSize extends React.Component {
  refCallback = element => {
    if (element) {
      this.props.getSize(element.getBoundingClientRect());
    }
  };

  render() {
    return (
      <div ref={this.refCallback} style={{ border: "1px solid red" }}>
        {faker.lorem.paragraphs(Math.random() * 10)}
      </div>
    );
  }
}
</pre>

The <code>render</code> method outputs a <code>&lt;div&gt;</code> with a ref callback and a red border. Inside, we use <code>faker</code> to generate up to 10 random paragraphs.

After React places this element, it calls <code>refCallback</code> with a reference to the rendered DOM node. We can then use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"><code>getBoundingClientRect</code></a> to measure its size.

<pre lang="javascript">
{
  "x": 8,
  "y": 158.8125,
  "width": 544,
  "height": 340,
  "top": 158.8125,
  "right": 552,
  "bottom": 498.8125,
  "left": 8
}
</pre>

All sorts of useful info!

<h2>So why not just use <code>componentDidMount</code>?</h2>

Yes, that works too. But it's less elegant because you have to save the <code>ref</code> first. The <code>refCallback</code> API calls your function with a nice reference already packaged in.

However, you might still have to do that if your component size changes <em>after</em> initial render. Observe ðŸ‘‡

<iframe src="https://codesandbox.io/embed/v6m4o48zl" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>

Clicking the <code>shuffle</code> button doesn't report new sizing information up the hierarchy. That's not good ðŸ¤”

If your component changes size without re-mounting, you have to re-measure its size in <code>componentDidUpdate</code> as well. But that way lies troubleâ€¦ you can fall into the infinite recursion trap.

You can solve the problem with a lock, like this ðŸ‘‡

<iframe src="https://codesandbox.io/embed/7jqmo1jn8j" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>

Keep clicking <code>shuffle</code> and sizing info is always correct.

The key is enabling size reporting when you logically know size is going to change, in <code>shuffle</code>, and disabling it as soon as you report the change in <code>componentDidUpdate</code>.

<pre lang="javascript">
shuffle = () => {
    this.doReportSize = true;
    this.setState({
      text: faker.lorem.paragraphs(Math.random() * 10)
    });
  };

  refCallback = element => {
    if (element) {
      this.elementRef = element;
      this.props.getSize(element.getBoundingClientRect());
    }
  };

  componentDidUpdate() {
    if (this.doReportSize) {
      this.props.getSize(this.elementRef.getBoundingClientRect());
      this.doReportSize = false;
    }
  }
</pre>

Oof, not pretty. Setting a <code>this.elementRef</code> in our callback, messing around with class properties for flags. Pretty sure we could've just used the new <code>React.createRef()</code> API in combination with <code>componentDidMount</code> and <code>componentDidUpdate</code>.

Would still need the flag to prevent infinite loops, however.

I wonder if using class properties to make render flags like that will continue to work when asynchronous rendering comes with React 17 ðŸ¤”]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8444</wp:post_id>
		<wp:post_date><![CDATA[2018-06-07 10:04:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-07 17:04:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ref-callbacks-measure-react-component-size]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="front-end"><![CDATA[Front End]]></category>
		<category domain="category" nicename="technical"><![CDATA[Technical]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[publish_post_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[publish_to_discourse]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c68e0a57110ca30bcd4f4c21725b4736]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" width="580" height="870" src="https://codesandbox.io/embed/71vx2q5r76#?secret=SyHKovHY1l" data-secret="SyHKovHY1l"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_c68e0a57110ca30bcd4f4c21725b4736]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528390929]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9726891f37745f20911bc33153e6470a]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" width="580" height="870" src="https://codesandbox.io/embed/v6m4o48zl#?secret=D2SlHVG2rm" data-secret="D2SlHVG2rm"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_9726891f37745f20911bc33153e6470a]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528390930]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_25cf02016b1a8b78b71e7cddbeea8569]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" width="580" height="870" src="https://codesandbox.io/embed/7jqmo1jn8j#?secret=bd42F8jkLJ" data-secret="bd42F8jkLJ"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_25cf02016b1a8b78b71e7cddbeea8569]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528390930]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://swizec.com/blog/wp-content/uploads/2018/06/patricia-serna-415257-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_twitter-image]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://swizec.com/blog/wp-content/uploads/2018/06/patricia-serna-415257-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[You can use ref callbacks to measure the rendered size of React components, did you know? It's a neat little trick.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_05affd165389cd7fc47879262d9844ca]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bb2c05c8a39f2af32e13b37155e16b80]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6efecfe7776bd2ce4f8d2044e82f448c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f8c90c0d7ea216a307bf4ea9a245f24d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_92540f87fc5f70297a5cb52913a1d4e9]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bbaf7a1b8e6a90b80b09697cf34bdcd8]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[wp-syntax-cache-content]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{i:1;s:3357:"
<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #FF0000;">class</span> ReportSize <span style="color: #FF0000;">extends</span> React.<span style="color: #660066;">Component</span> <span style="color: #009900;">&#123;</span>
  refCallback <span style="color: #339933;">=</span> element <span style="color: #339933;">=&gt;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>element<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">props</span>.<span style="color: #660066;">getSize</span><span style="color: #009900;">&#40;</span>element.<span style="color: #660066;">getBoundingClientRect</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
&nbsp;
  render<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">return</span> <span style="color: #009900;">&#40;</span>
      <span style="color: #339933;">&lt;</span>div ref<span style="color: #339933;">=</span><span style="color: #009900;">&#123;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">refCallback</span><span style="color: #009900;">&#125;</span> style<span style="color: #339933;">=</span><span style="color: #009900;">&#123;</span><span style="color: #009900;">&#123;</span> border<span style="color: #339933;">:</span> <span style="color: #3366CC;">&quot;1px solid red&quot;</span> <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#125;</span><span style="color: #339933;">&gt;</span>
        <span style="color: #009900;">&#123;</span>faker.<span style="color: #660066;">lorem</span>.<span style="color: #660066;">paragraphs</span><span style="color: #009900;">&#40;</span><span style="">Math</span>.<span style="color: #660066;">random</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">*</span> <span style="color: #CC0000;">10</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#125;</span>
      <span style="color: #339933;">&lt;/</span>div<span style="color: #339933;">&gt;</span>
    <span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">class ReportSize extends React.Component {
  refCallback = element =&gt; {
    if (element) {
      this.props.getSize(element.getBoundingClientRect());
    }
  };

  render() {
    return (
      &lt;div ref={this.refCallback} style={{ border: &quot;1px solid red&quot; }}&gt;
        {faker.lorem.paragraphs(Math.random() * 10)}
      &lt;/div&gt;
    );
  }
}</p></div>
";i:2;s:1865:"
<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;"><span style="color: #009900;">&#123;</span>
  <span style="color: #3366CC;">&quot;x&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">8</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;y&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">158.8125</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;width&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">544</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;height&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">340</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;top&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">158.8125</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;right&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">552</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;bottom&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">498.8125</span><span style="color: #339933;">,</span>
  <span style="color: #3366CC;">&quot;left&quot;</span><span style="color: #339933;">:</span> <span style="color: #CC0000;">8</span>
<span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">{
  &quot;x&quot;: 8,
  &quot;y&quot;: 158.8125,
  &quot;width&quot;: 544,
  &quot;height&quot;: 340,
  &quot;top&quot;: 158.8125,
  &quot;right&quot;: 552,
  &quot;bottom&quot;: 498.8125,
  &quot;left&quot;: 8
}</p></div>
";i:3;s:4459:"
<div class="wp_syntax" style="position:relative;"><table><tr><td class="code"><pre class="javascript" style="font-family:monospace;">shuffle <span style="color: #339933;">=</span> <span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">=&gt;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">doReportSize</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">true</span><span style="color: #339933;">;</span>
    <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">setState</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#123;</span>
      text<span style="color: #339933;">:</span> faker.<span style="color: #660066;">lorem</span>.<span style="color: #660066;">paragraphs</span><span style="color: #009900;">&#40;</span><span style="">Math</span>.<span style="color: #660066;">random</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #339933;">*</span> <span style="color: #CC0000;">10</span><span style="color: #009900;">&#41;</span>
    <span style="color: #009900;">&#125;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
&nbsp;
  refCallback <span style="color: #339933;">=</span> element <span style="color: #339933;">=&gt;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span>element<span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">elementRef</span> <span style="color: #339933;">=</span> element<span style="color: #339933;">;</span>
      <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">props</span>.<span style="color: #660066;">getSize</span><span style="color: #009900;">&#40;</span>element.<span style="color: #660066;">getBoundingClientRect</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span><span style="color: #339933;">;</span>
&nbsp;
  componentDidUpdate<span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
    <span style="color: #000066; font-weight: bold;">if</span> <span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">doReportSize</span><span style="color: #009900;">&#41;</span> <span style="color: #009900;">&#123;</span>
      <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">props</span>.<span style="color: #660066;">getSize</span><span style="color: #009900;">&#40;</span><span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">elementRef</span>.<span style="color: #660066;">getBoundingClientRect</span><span style="color: #009900;">&#40;</span><span style="color: #009900;">&#41;</span><span style="color: #009900;">&#41;</span><span style="color: #339933;">;</span>
      <span style="color: #000066; font-weight: bold;">this</span>.<span style="color: #660066;">doReportSize</span> <span style="color: #339933;">=</span> <span style="color: #003366; font-weight: bold;">false</span><span style="color: #339933;">;</span>
    <span style="color: #009900;">&#125;</span>
  <span style="color: #009900;">&#125;</span></pre></td></tr></table><p class="theCode" style="display:none;">shuffle = () =&gt; {
    this.doReportSize = true;
    this.setState({
      text: faker.lorem.paragraphs(Math.random() * 10)
    });
  };

  refCallback = element =&gt; {
    if (element) {
      this.elementRef = element;
      this.props.getSize(element.getBoundingClientRect());
    }
  };

  componentDidUpdate() {
    if (this.doReportSize) {
      this.props.getSize(this.elementRef.getBoundingClientRect());
      this.doReportSize = false;
    }
  }</p></div>
";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_opengraph-image-id]]></wp:meta_key>
			<wp:meta_value><![CDATA[8448]]></wp:meta_value>
		</wp:postmeta>
	</item>
	
</channel>
</rss>

<!--
Object Caching 42/95 objects using disk
Page Caching using disk: enhanced{w3tc_pagecache_reject_reason}
Content Delivery Network via d3nulzlctd9uky.cloudfront.net (wp-admin)
Minified using disk (wp-admin)
Database Caching using disk (Request-wide modification query)

Served from: swizec.com @ 2020-08-12 18:42:08 by W3 Total Cache
-->