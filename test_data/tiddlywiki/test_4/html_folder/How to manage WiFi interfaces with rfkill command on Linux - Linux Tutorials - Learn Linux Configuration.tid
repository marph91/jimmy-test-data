caption: How to manage WiFi interfaces with rfkill command on Linux - Linux Tutorials - Learn Linux Configuration
created: 20230118011020429
location: https://linuxconfig.org/how-to-manage-wifi-interfaces-with-rfkill-command-on-linux
modified: 20230118011020429
title: How to manage WiFi interfaces with rfkill command on Linux - Linux Tutorials - Learn Linux Configuration
type: text/vnd.tiddlywiki
when: 2023/1/18 01:10:20

https://linuxconfig.org/how-to-manage-wifi-interfaces-with-rfkill-command-on-linux

<h2>Listing wireless interfaces</h2>
<p>The most basic operation we can perform with <code>rfkill</code> is listing all the available wireless interfaces on a machine. To accomplish this action, all we have to do is to invoke the utility without specifying any option or argument:</p>
<pre>$ sudo rfkill</pre>
<p>Here is the output produced by the command on my machine:</p>
<pre>ID TYPE      DEVICE                   SOFT      HARD
 0 bluetooth tpacpi_bluetooth_sw unblocked unblocked
 2 wlan      phy0                unblocked unblocked
 5 bluetooth hci0                unblocked unblocked
</pre>
<p></p><hr><div data-fuse="22189504506" class="incontent_ads"></div><hr><center><a href="https://twitter.com/linuxconfig">
<img height="20" width="20" alt="Twitter icon" rel="nofollow" src="https://linuxconfig.org/wp-content/uploads/twitter.ico"> Follow LinuxConfig.org on Twitter for the latest tips and tricks about Linux!
</a></center> <br>The output of the program, as we can see, is organized in columns. In the first column displayed by default, <strong>ID</strong>, we can see the device identifier value; in the second, <strong>TYPE</strong>, we can find the device type; in this case, for example, we can distinguish&nbsp; bluetooth and wlan interfaces. The third column, <strong>DEVICE</strong>, reports the kernel device name. The last two columns report the status of the <strong>soft</strong> and <strong>hard</strong> block for an interface, respectively.<p></p>
<p>Another column is available but not included by default: <strong>TYPE-DESC</strong>, which reports the description of the device type. To make so that it is included in the output of rfkill, or more generally to specify what columns should be included in it, we can use the <code>-o</code> option (which is the short version of <code>--output</code>), and provide the comma-separated list of the columns as argument (a shortcut to make so that all available columns are displayed, instead, is <code>--output-all</code>).</p>
<p>Let’s see an example: suppose we want to include only the <em>ID, TYPE-DESC, SOFT </em>and<em> HARD</em> columns in the output of rfkill. Here is how we would invoke the program:</p>
<pre>$ sudo rfkill -o ID,TYPE-DESC,SOFT,HARD</pre>
<p>Here is the output we would obtain:</p>
<pre>ID TYPE-DESC         SOFT      HARD
 0 Bluetooth    unblocked unblocked
 2 Wireless LAN unblocked unblocked
 4 Bluetooth    unblocked unblocked</pre>
<p>There are other options we can use to format the output generated by rfkill. We can for, example, make the program generate a JSON-formatted output. All we have to do is to invoke it with the <code>-J</code> or <code>--json</code> option:</p>
<pre>{
   "rfkilldevices": [
      {
         "id": 0,
         "type": "bluetooth",
         "device": "tpacpi_bluetooth_sw",
         "soft": "unblocked",
         "hard": "unblocked"
      },{
         "id": 2,
         "type": "wlan",
         "device": "phy0",
         "soft": "unblocked",
         "hard": "unblocked"
      },{
         "id": 5,
         "type": "bluetooth",
         "device": "hci0",
         "soft": "unblocked",
         "hard": "unblocked"
      }
   ]
}
</pre>
<p>Getting a JSON formatted output can be useful in some situations, since JSON can be easily parsed with our programming language of choice. <a href="https://linuxconfig.org/how-to-parse-data-from-json-into-python">Parsing JSON files with Python</a>, for example, is really easy!</p>
<h2>Block, Unblock and toggle the status of wireless interfaces</h2>
<p>Once we obtain the list of the available wireless interfaces on our machine, managing their status with rfkill is really easy. We can block, unblock or more generically toggle the status of an interface referencing it by its ID. Let’s see some examples.</p>
<h3>Blocking an interface by ID</h3>
<p>A wireless interface can be subject of two type of blocks: software and hardware. The “hard” block status cannot be changed via software, and is typically a block performed by an hardware switch, or implemented via the machine firmware in specific situations: on some machines, for example, it’s possible to disable the wifi interface when a LAN cable is connected.</p>
<p></p><hr><div data-fuse="22189504224" class="incontent_ads"></div><hr>A “soft” block, instead, is performed via software, and we can set its status by using rfkill. Suppose we want to disable the bluetooth interface which in the previous example has the ID 0. Here is the command we would run:<p></p>
<pre>$ sudo rfkill block 0</pre>
<p>The device is now reported as “soft blocked”:</p>
<pre>ID TYPE      DEVICE                   SOFT      HARD
 0 bluetooth tpacpi_bluetooth_sw   blocked unblocked
 2 wlan      phy0                unblocked unblocked
</pre>
<h3>Blocking interfaces by type</h3>
<p>Using rfkill we can reference devices not only by their ID, but also by the value reported in the TYPE column. This can be useful if we want to block or unblock multiple devices at once. For instance, suppose we want to block all available bluetooth devices with a single command; here is what we would run:</p>
<pre>$ sudo rfkill block bluetooth</pre>
<h3>Unblocking interfaces</h3>
<p>Unblocking one or more interfaces with rfkill is just as easy. All we have to do is to use the “unblock” command instead of “block”. Supposing we want to unblock the bluetooth device we blocked in the previous example, we would run:</p>
<pre>$ sudo rfkill unblock 0</pre>
<p>To unblock all bluetooth devices, instead:</p>
<pre>$ sudo rfkill unblock bluetooth</pre>
<h3>Toggle the status of an interface</h3>
<p>By using the “toggle” command, we can switch the status of an interface, without specifying it explicitly. If an interface is blocked, it will be unblocked, and vice-versa. To toggle the status of the interface with ID 0, for example, we would run:</p>
<pre>$ sudo rfkill toggle 0</pre>
<h2>Running rfkill without administrative privileges</h2>
<p>On distributions like Debian and Ubuntu, or more generally where not configured otherwise, to list the available wireless interfaces with rfkill and to change their status, so to soft block or unblock them, rfkill must be invoked with administrative privileges, either by prefixing the command with sudo, or by invoking it as the root user directly. On recent versions of Fedora, however, it’s possibile to perform those actions by launching the command as a normal user. Why this happens?</p>
<p></p><hr><div data-fuse="22189504509" class="incontent_ads"></div><hr>The rkill user interface exposed by the Linux kernel is the <code>/dev/rfkill</code> character device. If we take a look at the permissions of this device by running ls on it, we can see that a <code>+</code> sign is reported in the permissions notation:<p></p>
<pre>$ ls -l /dev/rfkill
crw-rw-r--<strong>+</strong> 1 root root 10, 242 Mar 22 09:18 /dev/rfkill</pre>
<p>The <code>+</code> sign means that the file has <a href="https://linuxconfig.org/how-to-manage-acls-on-linux">ACL</a> extended attributes applied. To get more information about it, we can use the <code>getfacl</code> command:</p>
<pre>$ getfacl /dev/rfkill</pre>
<p>We obtain the following output:</p>
<pre># file: dev/rfkill
# owner: root
# group: root
user::rw-
user:doc:rw-
group::rw-
mask::rw-
other::r--
</pre>
<p>As you can see, by default, apart from standard unix permissions, a specific <code>rw</code> permission on the file exists for the “doc” user, which is my username on the machine. This is done automatically by the distribution, and is why we can launch it without privilege escalation. If we want to remove those special permissions from the file, we can simply run the following command:</p>
<pre>$ sudo setfacl -b /dev/rfkill</pre>

